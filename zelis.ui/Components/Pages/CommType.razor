@page "/commtype"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject HttpClient Http

<h3>Create Communication Type</h3>

<EditForm Model="@form" OnValidSubmit="SubmitAsync">
  <DataAnnotationsValidator />

  <div>
    <label>Type Code</label><br />
    <InputText @bind-Value="form.TypeCode" />
  </div>

  <div class="mt-2">
    <label>Display Name</label><br />
    <InputText @bind-Value="form.DisplayName" />
  </div>

  <div class="mt-3">
    <button type="submit" disabled="@isSubmitting">
      @(isSubmitting ? "Creating..." : "Create")
    </button>
  </div>

  @if (!string.IsNullOrWhiteSpace(statusMessage))
  {
    <p class="mt-2">@statusMessage</p>
  }
</EditForm>

@code {
  // Mutable class for binding
  class FormModel
  {
    public string TypeCode { get; set; } = "";
    public string DisplayName { get; set; } = "";
  }

  // DTOs can stay as records
  record CommunicationTypeReq(string TypeCode, string DisplayName, List<CommunicationTypeStatusReq> AllowedStatuses);
  record CommunicationTypeStatusReq(string TypeCode, string StatusCode, string Description);

  FormModel form = new();
  bool isSubmitting = false;
  string? statusMessage;

  async Task SubmitAsync()
  {
    if (isSubmitting) return;
    isSubmitting = true;
    statusMessage = "Posting...";

    var payload = new CommunicationTypeReq(
      TypeCode: form.TypeCode.Trim(),
      DisplayName: form.DisplayName.Trim(),
      AllowedStatuses: []
    );

    try
    {
      var resp = await Http.PostAsJsonAsync("api/CommunicationType", payload);
      var body = await resp.Content.ReadAsStringAsync();
      statusMessage = $"HTTP {(int)resp.StatusCode} {resp.StatusCode}\n{body}";

      if (resp.IsSuccessStatusCode)
      {
        form = new(); // reset
      }
    }
    catch (Exception ex)
    {
      statusMessage = "EXCEPTION: " + ex.Message;
    }
    finally
    {
      isSubmitting = false;
    }
  }
}